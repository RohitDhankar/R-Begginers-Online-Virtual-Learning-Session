#
min(nm_v+5)
#
mean(nm_v+5)
#
median(nm_v+5)
#
print("The Quantile - ")
quantile(nm_v+5)
# Code Section -8
ch_v <- c("11","12","13","14","15")
#
class(ch_v)
#ch_v + 2 # Error in ch_v + 2 : non-numeric argument to binary operator
# Cant do a Math operation on CHAR Vector - lets Convert into NUM Vector
#
nm_v <- as.numeric(ch_v)
#
class(nm_v)
nm_v + 2
#
print("Summary of the Num Vector as below :- ")
summary(nm_v+2)
#
summary(nm_v+5)
#
sum(nm_v+5)
#
sd(nm_v+5)
#
max(nm_v+5)
#
min(nm_v+5)
#
mean(nm_v+5)
#
median(nm_v+5)
#
print("The Quantile - ")
quantile(nm_v+5)
#
quantile(nm_v+100)
# Code Section -8
ch_v <- c("11","12","13","14","15")
#
class(ch_v)
#ch_v + 2 # Error in ch_v + 2 : non-numeric argument to binary operator
# Cant do a Math operation on CHAR Vector - lets Convert into NUM Vector
#
nm_v <- as.numeric(ch_v)
#
class(nm_v)
nm_v + 2
#
print("Summary of the Num Vector as below :- ")
summary(nm_v+2)
#
summary(nm_v+5)
#
sum(nm_v+5)
#
sd(nm_v+5)
#
max(nm_v+5)
#
min(nm_v+5)
#
mean(nm_v+5)
#
median(nm_v+5)
#
print("The Quantile - ")
quantile(nm_v+5)
#
quantile(nm_v+100)
#
print("We can also specify the Quantile buckets or Percentiles as an argument to the Quantile function :- ")
#
nmv_q <- c(10,15,20,25,30,35,40,45,50,55,60,65,70,75,80,85,90,100)
percent_1 <- quantile(nmv_q, c(.50,.84, .97, .99))
percent_1
# Code Section -8
ch_v <- c("11","12","13","14","15")
#
class(ch_v)
#ch_v + 2 # Error in ch_v + 2 : non-numeric argument to binary operator
# Cant do a Math operation on CHAR Vector - lets Convert into NUM Vector
#
nm_v <- as.numeric(ch_v)
#
class(nm_v)
nm_v + 2
#
print("Summary of the Num Vector as below :- ")
summary(nm_v+2)
#
summary(nm_v+5)
#
sum(nm_v+5)
#
sd(nm_v+5)
#
max(nm_v+5)
#
min(nm_v+5)
#
mean(nm_v+5)
#
median(nm_v+5)
#
print("The Quantile - ")
quantile(nm_v+5)
#
quantile(nm_v+100)
#
print("We can also specify the Quantile buckets or Percentiles as an argument to the Quantile function :- ")
#
nmv_q <- c(10,15,20,25,30,35,40,45,50,55,60,65,70,75,80,85,90,100)
percent_1 <- quantile(nmv_q, c(.50,.75,.84, .97, .99))
percent_1
plot
# Seen above we have the MEDIAN quartile - 50% and the UPPER Quartile - 75% along with THREE more percentiles.
# Code Section -8
ch_v <- c("11","12","13","14","15")
#
class(ch_v)
#ch_v + 2 # Error in ch_v + 2 : non-numeric argument to binary operator
# Cant do a Math operation on CHAR Vector - lets Convert into NUM Vector
#
nm_v <- as.numeric(ch_v)
#
class(nm_v)
nm_v + 2
#
#Summary of the Num Vector as below :-
#
summary(nm_v+2)
#
summary(nm_v+5)
#
sum(nm_v+5)
#
sd(nm_v+5)
#
max(nm_v+5)
#
min(nm_v+5)
#
mean(nm_v+5)
#
median(nm_v+5)
#
#The Quantile -
#
quantile(nm_v+5)
#
quantile(nm_v+100)
#
#We can also specify the Quantile buckets or Percentiles as an argument to the Quantile function :-
#
nmv_q <- c(10,15,20,25,30,35,40,45,50,55,60,65,70,75,80,85,90,100)
percent_1 <- quantile(nmv_q, c(.50,.75,.84, .97, .99))
percent_1
plot(percent_1)
# Seen above we have the MEDIAN quartile - 50% and the UPPER Quartile - 75% along with THREE more percentiles.
# Code Section -8
ch_v <- c("11","12","13","14","15")
#
class(ch_v)
#ch_v + 2 # Error in ch_v + 2 : non-numeric argument to binary operator
# Cant do a Math operation on CHAR Vector - lets Convert into NUM Vector
#
nm_v <- as.numeric(ch_v)
#
class(nm_v)
nm_v + 2
#
#Summary of the Num Vector as below :-
#
summary(nm_v+2)
#
summary(nm_v+5)
#
sum(nm_v+5)
#
sd(nm_v+5)
#
max(nm_v+5)
#
min(nm_v+5)
#
mean(nm_v+5)
#
median(nm_v+5)
#
#The Quantile -
#
quantile(nm_v+5)
#
quantile(nm_v+100)
#
#We can also specify the Quantile buckets or Percentiles as an argument to the Quantile function :-
#
nmv_q <- c(10,15,20,25,30,35,40,45,50,55,60,65,70,75,80,85,90,100)
percent_1 <- quantile(nmv_q, c(.50,.75,.84, .97, .99))
percent_1
boxplot(percent_1,col = "red",horizontal = TRUE,main = "Box and Whisker Plot of Quantiles",xlab = "Quantile Values")
# Seen above we have the MEDIAN quartile - 50% and the UPPER Quartile - 75% along with THREE more percentiles.
# Code Section -9
nmv_q <- c(10,15,20,25,30,35,40,45,50,55,60,65,70,75,80,85,90,100)
percent_1 <- quantile(nmv_q, c(.50,.75,.84, .97, .99))
percent_1
percent_2 <- quantile(nmv_q, c(.1, .3, .16, .40, .50))
percent_2
boxplot(percent_1,percent_2,col = "red",
names = c("perc_1","perc_2"),horizontal = TRUE,
main = "Box and Whisker Plot of Quantiles",
xlab = "Quantile Values")
# Kindly note the Quantiles are randomly chosen here
# this is not the best way to choose quantiles
# we shall come back for details later in this text
# Code Section -9
nmv_q <- c(10,15,20,25,30,35,40,45,50,55,60,65,70,75,80,85,90,100)
percent_1 <- quantile(nmv_q, c(.50,.75,.84, .97, .99))
percent_1
percent_2 <- quantile(nmv_q, c(.1, .3, .16, .40, .50))
percent_2
col_boxes = (c("red","blue"))
boxplot(percent_1,percent_2,col = col_boxes,
names = c("perc_1","perc_2"),horizontal = TRUE,
main = "Box and Whisker Plot of Quantiles",
xlab = "Quantile Values")
# Kindly note the Quantiles are randomly chosen here
# this is not the best way to choose quantiles
# we shall come back for details later in this text
# Code Section -9
nmv_q <- c(10,15,20,25,30,35,40,45,50,55,60,65,70,75,80,85,90,100)
percent_1 <- quantile(nmv_q, c(.50,.75,.84, .97, .99))
percent_1
percent_2 <- quantile(nmv_q, c(.1, .3, .16, .40, .50))
percent_2
percent_3 <- quantile(nmv_q, c(.16, .40, .50,.75,.84))
percent_3
col_boxes = (c("red","blue"))
boxplot(percent_1,percent_2,percent_3,col = col_boxes,
names = c("perc_1","perc_2"),horizontal = TRUE,
main = "Box and Whisker Plot of Quantiles",
xlab = "Quantile Values")
# Code Section -9
nmv_q <- c(10,15,20,25,30,35,40,45,50,55,60,65,70,75,80,85,90,100)
percent_1 <- quantile(nmv_q, c(.50,.75,.84, .97, .99))
percent_1
percent_2 <- quantile(nmv_q, c(.1, .3, .16, .40, .50))
percent_2
percent_3 <- quantile(nmv_q, c(.16, .40, .50,.75,.84))
percent_3
col_boxes = (c("red","blue"))
boxplot(percent_1,percent_2,percent_3,col = col_boxes,
names = c("perc_1","perc_2","perc_3"),horizontal = TRUE,
main = "Box and Whisker Plot of Quantiles",
xlab = "Quantile Values")
# Kindly note the Quantiles are randomly chosen here
# this is not the best way to choose quantiles
# we shall come back for details later in this text
# Code Section -9
nmv_q <- c(10,15,20,25,30,35,40,45,50,55,60,65,70,75,80,85,90,100)
percent_1 <- quantile(nmv_q, c(.50,.75,.84, .97, .99))
percent_1
percent_2 <- quantile(nmv_q, c(.1, .3, .16, .40, .50))
percent_2
percent_3 <- quantile(nmv_q, c(.16, .40, .50,.75,.84))
percent_3
col_boxes = (c("red","blue","green"))
boxplot(percent_1,percent_2,percent_3,col = col_boxes,
names = c("perc_1","perc_2","perc_3"),horizontal = TRUE,
main = "Box and Whisker Plot of Quantiles",
xlab = "Quantile Values")
# Kindly note the Quantiles are randomly chosen here
# this is not the best way to choose quantiles
# we shall come back for details later in this text
getwd()
#
ls()
# Code Section -1
a1 <- "FINANCE"
b1 <- "MARKETING"
c1 <- "SALES"
d1 <- 3.1416
char_vector <- c("x","d","c","f")
print(a1)
#
print(char_vector)
#
# Code Section -2
num_vector <- c(22,22,33,33,44)
print(num_vector)
num_vector1 <- c(11,12,13,14,15)
#
num_vector3 <- c(num_vector,num_vector1)
print(num_vector3)
# Code Section -3
num_vector3 + 5
# Adds NUMERIC VALUE = 5 to all ELEMENTS of the Num Vector.
# Code Section -4
num_vector1 * num_vector3
# First 5 elements of - num_vector3 multiplied by the Five Elements
# of num_vector1 and again the Next 5 elements of num_vector3
# multiplied by the Five Elements of num_vector1
# Code Section -5
length(num_vector1 * num_vector3)
# Code Section -6
#num_vector1 %*% num_vector3 # Error in num_vector1 %*% num_vector3 : non-conformable arguments
# Vectors are not of same Length above - below they are of same length
nv <- c(1,2,3,4,5)
nv1 <- c(6,7,8,9,10)
nv %*% nv1 # Inner Product of same Length Vectors
# Algeberic Dot Product as defined by WikiPedia - "https://en.wikipedia.org/wiki/Dot_product"
# Code Section -7
log(num_vector3[2]) # Log Base 2 of 22
#
log(22)
#
# Code Section -8
ch_v <- c("11","12","13","14","15")
#
class(ch_v)
#ch_v + 2 # Error in ch_v + 2 : non-numeric argument to binary operator
# Cant do a Math operation on CHAR Vector - lets Convert into NUM Vector
#
nm_v <- as.numeric(ch_v)
#
class(nm_v)
nm_v + 2
#
#Summary of the Num Vector as below :-
#
summary(nm_v+2)
#
summary(nm_v+5)
#
sum(nm_v+5)
#
sd(nm_v+5)
#
max(nm_v+5)
#
min(nm_v+5)
#
mean(nm_v+5)
#
median(nm_v+5)
#
#The Quantile -
#
quantile(nm_v+5)
#
quantile(nm_v+100)
#
#We can also specify the Quantile buckets or Percentiles as an argument to the Quantile function :-
#
nmv_q <- c(10,15,20,25,30,35,40,45,50,55,60,65,70,75,80,85,90,100)
percent_1 <- quantile(nmv_q, c(.50,.75,.84, .97, .99))
percent_1
boxplot(percent_1,col = "red",horizontal = TRUE,
main = "Box and Whisker Plot of Quantiles",
xlab = "Quantile Values")
# Kindly note how the ARGUMENTs to boxplot()
# have been bumped to the next row - keeping in mind
# the Horizontal space of our PDF knit of the .Rmd file
# Seen above we have the MEDIAN quartile - 50% and the UPPER Quartile - 75% along with THREE more percentiles.
# Code Section -9
nmv_q <- c(10,15,20,25,30,35,40,45,50,55,60,65,70,75,80,85,90,100)
percent_1 <- quantile(nmv_q, c(.50,.75,.84, .97, .99))
percent_1
percent_2 <- quantile(nmv_q, c(.1, .3, .16, .40, .50))
percent_2
percent_3 <- quantile(nmv_q, c(.16, .40, .50,.75,.84))
percent_3
col_boxes = (c("red","blue","green"))
boxplot(percent_1,percent_2,percent_3,col = col_boxes,
names = c("perc_1","perc_2","perc_3"),horizontal = TRUE,
main = "Box and Whisker Plot of Quantiles",
xlab = "Quantile Values")
# Kindly note the Quantiles are randomly chosen here
# this is not the best way to choose quantiles
# we shall come back for details later in this text
typeof(array_1)
#
# We can also look at the CLASS of an Object
#
class(array_1)
# Code Section -10
m1 <- matrix(data=66:69,nrow=2,ncol=2)
m1
# Code Section -10
m1 <- matrix(data=66:69,nrow=2,ncol=2)
m1
# Lets now TRANSPOSE this MATRIX - for more on TRANSPOSE of MATRICES
# kindly refer this Wiki Link -- https://en.wikipedia.org/wiki/Transpose
t(m1)
# Code Section -11
# Quick recap of the SEQUENCE
a_seq < - 66:69
# Code Section -11
# Quick recap of the SEQUENCE
a_seq <- 66:69
a_seq
# Lets look at another example of TRANSPOSE ....
m2 <- matrix(data=66:69,nrow=2,ncol=2)
m2
# Lets now TRANSPOSE this MATRIX - for more on TRANSPOSE of MATRICES
# kindly refer this Wiki Link -- https://en.wikipedia.org/wiki/Transpose
t(m1)
# As seen below - the DIAGONAL Elements remain as -is .
# 66 and 69 do not move .
# 67 and 68 switch places , thus giving us a Transpose Matrix.
# Code Section -11
# Quick recap of the SEQUENCE
a_seq <- 66:69
a_seq
# Lets look at another example of TRANSPOSE ....
m2 <- matrix(data=10:27,nrow=4,ncol=4)
m2
# Lets now TRANSPOSE this MATRIX - for more on TRANSPOSE of MATRICES
# kindly refer this Wiki Link -- https://en.wikipedia.org/wiki/Transpose
t(m1)
# As seen below - the DIAGONAL Elements remain as -is .
# 66 and 69 do not move .
# 67 and 68 switch places , thus giving us a Transpose Matrix.
# Code Section -10
m1 <- matrix(data=66:69,nrow=2,ncol=2)
m1
# Lets now TRANSPOSE this MATRIX - for more on TRANSPOSE of MATRICES
# kindly refer this Wiki Link -- https://en.wikipedia.org/wiki/Transpose
t(m1)
# As seen below - the DIAGONAL Elements remain as -is .
# 66 and 69 do not move .
# 67 and 68 switch places , thus giving us a Transpose Matrix.
# Lets look at another example of TRANSPOSE ....
m2 <- matrix(data=10:26,nrow=4,ncol=4)
m2
# Lets now TRANSPOSE this MATRIX - for more on TRANSPOSE of MATRICES
# kindly refer this Wiki Link -- https://en.wikipedia.org/wiki/Transpose
t(m2)
# Code Section -10
m1 <- matrix(data=66:69,nrow=2,ncol=2)
m1
# Lets now TRANSPOSE this MATRIX - for more on TRANSPOSE of MATRICES
# kindly refer this Wiki Link -- https://en.wikipedia.org/wiki/Transpose
t(m1)
# As seen below - the DIAGONAL Elements remain as -is .
# 66 and 69 do not move .
# 67 and 68 switch places , thus giving us a Transpose Matrix.
# Lets look at another example of TRANSPOSE ....
m2 <- matrix(data=10:25,nrow=4,ncol=4)
m2
## Note  in the above sequence - 10:25 - both 10 and 25 are included.
# Lets now TRANSPOSE this MATRIX - for more on TRANSPOSE of MATRICES
# kindly refer this Wiki Link -- https://en.wikipedia.org/wiki/Transpose
t(m2)
# Code Section -10
m1 <- matrix(data=66:69,nrow=2,ncol=2)
m1
# Lets now TRANSPOSE this MATRIX - for more on TRANSPOSE of MATRICES
# kindly refer this Wiki Link -- https://en.wikipedia.org/wiki/Transpose
t(m1)
# As seen below - the DIAGONAL Elements remain as -is .
# 66 and 69 do not move .
# 67 and 68 switch places , thus giving us a Transpose Matrix.
# Lets look at another example of TRANSPOSE ....
m2 <- matrix(data=10:25,nrow=4,ncol=4)
m2
## Note  in the above sequence - 10:25 - both 10 and 25 are included.
# Lets now TRANSPOSE this MATRIX - for more on TRANSPOSE of MATRICES
# kindly refer this Wiki Link -- https://en.wikipedia.org/wiki/Transpose
t(m2)
# As seen below - the DIAGONAL Elements remain as-is.
# 10, 15 , 20 , 25 -- do not move .
# Non Diagonal elements are Transposed ,giving the Transpose Matrix.
# Code Section -11
# Quick recap of the SEQUENCE
a_seq <- 66:69
a_seq
# In the earlier section we create a MATRIX by using a sequence within the COMBINE function
# We can also use the - seq - sequence function as seen below
b_seq <- seq(from=66, to=69, by=1)
b_seq
# Code Section -11
# Quick recap of the SEQUENCE
a_seq <- 66:69
a_seq
# In the earlier section we create a MATRIX by using a sequence within the COMBINE function
# We can also use the - seq - sequence function as seen below
b_seq <- seq(from=66, to=69, by=1)
b_seq
#
b_seq <- seq(from=66, to=69, by=2)
b_seq
# Code Section -11
# Quick recap of the SEQUENCE
a_seq <- 66:69
a_seq
# In the earlier section we create a MATRIX by using a sequence within the COMBINE function
# We can also use the - seq - sequence function as seen below
b_seq <- seq(from=66, to=69, by=1)
b_seq
#
b_seq <- seq(from=66, to=69, by=2)
b_seq
#
c_seq <- seq(from=1, to=10, by=2)
c_seq
