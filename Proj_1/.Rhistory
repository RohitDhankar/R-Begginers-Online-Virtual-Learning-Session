#
# Code Section -8
ch_v <- c("11","12","13","14","15")
#
class(ch_v)
#ch_v + 2 # Error in ch_v + 2 : non-numeric argument to binary operator
# Cant do a Math operation on CHAR Vector - lets Convert into NUM Vector
#
nm_v <- as.numeric(ch_v)
#
class(nm_v)
nm_v + 2
#
#Summary of the Num Vector as below :-
#
summary(nm_v+2)
#
summary(nm_v+5)
#
sum(nm_v+5)
#
sd(nm_v+5)
#
max(nm_v+5)
#
min(nm_v+5)
#
mean(nm_v+5)
#
median(nm_v+5)
#
#The Quantile -
#
quantile(nm_v+5)
#
quantile(nm_v+100)
#
#We can also specify the Quantile buckets or Percentiles as an argument to the Quantile function :-
#
nmv_q <- c(10,15,20,25,30,35,40,45,50,55,60,65,70,75,80,85,90,100)
percent_1 <- quantile(nmv_q, c(.50,.75,.84, .97, .99))
percent_1
boxplot(percent_1,col = "red",horizontal = TRUE,
main = "Box and Whisker Plot of Quantiles",
xlab = "Quantile Values")
# Kindly note how the ARGUMENTs to boxplot()
# have been bumped to the next row - keeping in mind
# the Horizontal space of our PDF knit of the .Rmd file
# Seen above we have the MEDIAN quartile - 50% and the UPPER Quartile - 75% along with THREE more percentiles.
# Code Section -9
nmv_q <- c(10,15,20,25,30,35,40,45,50,55,60,65,70,75,80,85,90,100)
percent_1 <- quantile(nmv_q, c(.50,.75,.84, .97, .99))
percent_1
percent_2 <- quantile(nmv_q, c(.1, .3, .16, .40, .50))
percent_2
percent_3 <- quantile(nmv_q, c(.16, .40, .50,.75,.84))
percent_3
col_boxes = (c("red","blue","green"))
boxplot(percent_1,percent_2,percent_3,col = col_boxes,
names = c("perc_1","perc_2","perc_3"),horizontal = TRUE,
main = "Box and Whisker Plot of Quantiles",
xlab = "Quantile Values")
# Kindly note the Quantiles are randomly chosen here
# this is not the best way to choose quantiles
# we shall come back for details later in this text
typeof(array_1)
#
# We can also look at the CLASS of an Object
#
class(array_1)
# Code Section -10
m1 <- matrix(data=66:69,nrow=2,ncol=2)
m1
# Code Section -10
m1 <- matrix(data=66:69,nrow=2,ncol=2)
m1
# Lets now TRANSPOSE this MATRIX - for more on TRANSPOSE of MATRICES
# kindly refer this Wiki Link -- https://en.wikipedia.org/wiki/Transpose
t(m1)
# Code Section -11
# Quick recap of the SEQUENCE
a_seq < - 66:69
# Code Section -11
# Quick recap of the SEQUENCE
a_seq <- 66:69
a_seq
# Lets look at another example of TRANSPOSE ....
m2 <- matrix(data=66:69,nrow=2,ncol=2)
m2
# Lets now TRANSPOSE this MATRIX - for more on TRANSPOSE of MATRICES
# kindly refer this Wiki Link -- https://en.wikipedia.org/wiki/Transpose
t(m1)
# As seen below - the DIAGONAL Elements remain as -is .
# 66 and 69 do not move .
# 67 and 68 switch places , thus giving us a Transpose Matrix.
# Code Section -11
# Quick recap of the SEQUENCE
a_seq <- 66:69
a_seq
# Lets look at another example of TRANSPOSE ....
m2 <- matrix(data=10:27,nrow=4,ncol=4)
m2
# Lets now TRANSPOSE this MATRIX - for more on TRANSPOSE of MATRICES
# kindly refer this Wiki Link -- https://en.wikipedia.org/wiki/Transpose
t(m1)
# As seen below - the DIAGONAL Elements remain as -is .
# 66 and 69 do not move .
# 67 and 68 switch places , thus giving us a Transpose Matrix.
# Code Section -10
m1 <- matrix(data=66:69,nrow=2,ncol=2)
m1
# Lets now TRANSPOSE this MATRIX - for more on TRANSPOSE of MATRICES
# kindly refer this Wiki Link -- https://en.wikipedia.org/wiki/Transpose
t(m1)
# As seen below - the DIAGONAL Elements remain as -is .
# 66 and 69 do not move .
# 67 and 68 switch places , thus giving us a Transpose Matrix.
# Lets look at another example of TRANSPOSE ....
m2 <- matrix(data=10:26,nrow=4,ncol=4)
m2
# Lets now TRANSPOSE this MATRIX - for more on TRANSPOSE of MATRICES
# kindly refer this Wiki Link -- https://en.wikipedia.org/wiki/Transpose
t(m2)
# Code Section -10
m1 <- matrix(data=66:69,nrow=2,ncol=2)
m1
# Lets now TRANSPOSE this MATRIX - for more on TRANSPOSE of MATRICES
# kindly refer this Wiki Link -- https://en.wikipedia.org/wiki/Transpose
t(m1)
# As seen below - the DIAGONAL Elements remain as -is .
# 66 and 69 do not move .
# 67 and 68 switch places , thus giving us a Transpose Matrix.
# Lets look at another example of TRANSPOSE ....
m2 <- matrix(data=10:25,nrow=4,ncol=4)
m2
## Note  in the above sequence - 10:25 - both 10 and 25 are included.
# Lets now TRANSPOSE this MATRIX - for more on TRANSPOSE of MATRICES
# kindly refer this Wiki Link -- https://en.wikipedia.org/wiki/Transpose
t(m2)
# Code Section -10
m1 <- matrix(data=66:69,nrow=2,ncol=2)
m1
# Lets now TRANSPOSE this MATRIX - for more on TRANSPOSE of MATRICES
# kindly refer this Wiki Link -- https://en.wikipedia.org/wiki/Transpose
t(m1)
# As seen below - the DIAGONAL Elements remain as -is .
# 66 and 69 do not move .
# 67 and 68 switch places , thus giving us a Transpose Matrix.
# Lets look at another example of TRANSPOSE ....
m2 <- matrix(data=10:25,nrow=4,ncol=4)
m2
## Note  in the above sequence - 10:25 - both 10 and 25 are included.
# Lets now TRANSPOSE this MATRIX - for more on TRANSPOSE of MATRICES
# kindly refer this Wiki Link -- https://en.wikipedia.org/wiki/Transpose
t(m2)
# As seen below - the DIAGONAL Elements remain as-is.
# 10, 15 , 20 , 25 -- do not move .
# Non Diagonal elements are Transposed ,giving the Transpose Matrix.
# Code Section -11
# Quick recap of the SEQUENCE
a_seq <- 66:69
a_seq
# In the earlier section we create a MATRIX by using a sequence within the COMBINE function
# We can also use the - seq - sequence function as seen below
b_seq <- seq(from=66, to=69, by=1)
b_seq
# Code Section -11
# Quick recap of the SEQUENCE
a_seq <- 66:69
a_seq
# In the earlier section we create a MATRIX by using a sequence within the COMBINE function
# We can also use the - seq - sequence function as seen below
b_seq <- seq(from=66, to=69, by=1)
b_seq
#
b_seq <- seq(from=66, to=69, by=2)
b_seq
# Code Section -11
# Quick recap of the SEQUENCE
a_seq <- 66:69
a_seq
# In the earlier section we create a MATRIX by using a sequence within the COMBINE function
# We can also use the - seq - sequence function as seen below
b_seq <- seq(from=66, to=69, by=1)
b_seq
#
b_seq <- seq(from=66, to=69, by=2)
b_seq
#
c_seq <- seq(from=1, to=10, by=2)
c_seq
?rainbox()
?rainbox
?rainbow
require(graphics)
# A Color Wheel
pie(rep(1, 12), col = rainbow(12))
library(graphics)
# Code Section -9
nmv_q <- c(10,15,20,25,30,35,40,45,50,55,60,65,70,75,80,85,90,100)
percent_1 <- quantile(nmv_q, c(.50,.75,.84, .97, .99))
percent_1
percent_2 <- quantile(nmv_q, c(.1, .3, .16, .40, .50))
percent_2
percent_3 <- quantile(nmv_q, c(.16, .40, .50,.75,.84))
percent_3
col_boxes = (c("red","blue","green"))
boxplot(percent_1,percent_2,percent_3,col = col_boxes,
names = c("perc_1","perc_2","perc_3"),horizontal = TRUE,
main = "Box and Whisker Plot of Quantiles",
xlab = "Quantile Values")
# Kindly note the Quantiles are randomly chosen here
# this is not the best way to choose quantiles
# we shall come back for details later in this text
# A slightly advanced version of the BoxPlot seen below -
boxplot(percent_1,percent_2,percent_3,col = col_boxes,
names = c("perc_1","perc_2","perc_3"),horizontal = TRUE,
main = "Box and Whisker Plot of Quantiles",
xlab = "Quantile Values")
# Kindly note the Quantiles are randomly chosen here
# this is not the best way to choose quantiles
# we shall come back for details later in this text
library(graphics)
# A Color Wheel
pie(rep(1, 12), col = rainbow(12))
# Code Section -9
nmv_q <- c(10,15,20,25,30,35,40,45,50,55,60,65,70,75,80,85,90,100)
percent_1 <- quantile(nmv_q, c(.50,.75,.84, .97, .99))
percent_1
percent_2 <- quantile(nmv_q, c(.1, .3, .16, .40, .50))
percent_2
percent_3 <- quantile(nmv_q, c(.16, .40, .50,.75,.84))
percent_3
col_boxes = (c("red","blue","green"))
boxplot(percent_1,percent_2,percent_3,col = col_boxes,
names = c("perc_1","perc_2","perc_3"),horizontal = TRUE,
main = "Box and Whisker Plot of Quantiles",
xlab = "Quantile Values")
# Kindly note the Quantiles are randomly chosen here
# this is not the best way to choose quantiles
# we shall come back for details later in this text
# A slightly advanced version of the BoxPlot seen below -
col_rainbow <- rainbow(12)
boxplot(percent_1,percent_2,percent_3,col = col_rainbow,
names = c("perc_1","perc_2","perc_3"),horizontal = TRUE,
main = "Box and Whisker Plot of Quantiles",
xlab = "Quantile Values")
# Kindly note the Quantiles are randomly chosen here
# this is not the best way to choose quantiles
# we shall come back for details later in this text
library(graphics)
# A Color Wheel
pie(rep(1, 12), col = rainbow(12))
col_rainbow <- rainbow(3)
boxplot(percent_1,percent_2,percent_3,col = col_rainbow,
names = c("perc_1","perc_2","perc_3"),horizontal = TRUE,
main = "Box and Whisker Plot of Quantiles",
xlab = "Quantile Values")
# Code Section -9
library(graphics)
nmv_q <- c(10,15,20,25,30,35,40,45,50,55,60,65,70,75,80,85,90,100)
percent_1 <- quantile(nmv_q, c(.50,.75,.84, .97, .99))
percent_1
percent_2 <- quantile(nmv_q, c(.1, .3, .16, .40, .50))
percent_2
percent_3 <- quantile(nmv_q, c(.16, .40, .50,.75,.84))
percent_3
col_boxes = (c("red","blue","green"))
boxplot(percent_1,percent_2,percent_3,col = col_boxes,
names = c("perc_1","perc_2","perc_3"),horizontal = TRUE,
main = "Box and Whisker Plot of Quantiles",
xlab = "Quantile Values")
# Kindly note the Quantiles are randomly chosen here
# this is not the best way to choose quantiles
# we shall come back for details later in this text
percent_4 <- quantile(nmv_q, c(.16, .40, .50,.95,.99))
percent_4
percent_5 <- quantile(nmv_q, c(.16, .24,.32 ,.40,.75))
percent_5
col_rainbow <- rainbow(5)
boxplot(percent_1,percent_2,percent_3,percent_4,percent_5,col = col_rainbow,
names = c("perc_1","perc_2","perc_3"),horizontal = TRUE,
main = "Box and Whisker Plot of Quantiles",
xlab = "Quantile Values")
percent_4 <- quantile(nmv_q, c(.16, .40, .50,.95,.99))
percent_4
percent_5 <- quantile(nmv_q, c(.16, .24,.32 ,.40,.75))
percent_5
col_rainbow <- rainbow(5)
boxplot(percent_1,percent_2,percent_3,percent_4,percent_5,col = col_rainbow,
names = c("perc_1","perc_2","perc_3","perc_4","perc_5"),horizontal = TRUE,
main = "Box and Whisker Plot of Quantiles",
xlab = "Quantile Values")
# A Color Wheel
pie(rep(1, 24), col = rainbow(24))
percent_4 <- quantile(nmv_q, c(.16, .40, .50,.95,.99))
percent_4
percent_5 <- quantile(nmv_q, c(.16, .24,.32 ,.40,.75))
percent_5
percent_6 <- quantile(nmv_q, c(.1, .5, .26, .45, .60))
percent_6
percent_7 <- quantile(nmv_q, c(.3, .7, .18, .43, .70))
percent_7
col_rainbow <- rainbow(7)
boxplot(percent_1,percent_2,percent_3,percent_4,percent_5,percent_6,percent_7,col = col_rainbow,
names = c("perc_1","perc_2","perc_3","perc_4","perc_5","perc_6","perc_7"),horizontal = TRUE,
main = "Box and Whisker Plot of Quantiles",
xlab = "Quantile Values")
# Just for Fun a PIE Graph --- you always
# need to avoid PIE Graphs
pie(rep(1, 48), col = rainbow(48))
# Just for Fun a PIE Graph --- you always
# need to avoid PIE Graphs
pie(rep(1, 34), col = rainbow(34))
# Just for Fun a PIE Graph --- you always
# need to avoid PIE Graphs
pie(rep(1, 11), col = rainbow(11))
# Just for Fun a PIE Graph --- you always
# need to avoid PIE Graphs
pie(rep(1, 7), col = rainbow(7))
# Code Section -11
# Quick recap of the SEQUENCE
a_seq <- 66:69
a_seq
# In the earlier section we create a MATRIX by using a sequence within the COMBINE function
# We can also use the - seq - sequence function as seen below
b_seq <- seq(from=66, to=69, by=1)
b_seq
#
b_seq <- seq(from=66, to=69, by=2)
b_seq
#
c_seq <- seq(from=1, to=10, by=2)
c_seq
# Code Section -11
# Quick recap of the SEQUENCE
a_seq <- 66:69
a_seq
# In the earlier section we create a MATRIX by using a sequence within the COMBINE function
# We can also use the - seq - sequence function as seen below
b_seq <- seq(from=66, to=69, by=1)
b_seq
#
b_seq <- seq(from=66, to=69, by=2)
b_seq
#
c_seq <- seq(from=1, to=10, by=2)
c_seq
class(c_seq)
# Code Section -10
m1 <- matrix(data=66:69,nrow=2,ncol=2)
m1
# Lets now TRANSPOSE this MATRIX - for more on TRANSPOSE of MATRICES
# kindly refer this Wiki Link -- https://en.wikipedia.org/wiki/Transpose
t(m1)
# As seen below - the DIAGONAL Elements remain as -is .
# 66 and 69 do not move .
# 67 and 68 switch places , thus giving us a Transpose Matrix.
# Lets look at another example of TRANSPOSE ....
m2 <- matrix(data=10:25,nrow=4,ncol=4)
m2
## Note  in the above sequence - 10:25 - both 10 and 25 are included.
# Lets now TRANSPOSE this MATRIX - for more on TRANSPOSE of MATRICES
# kindly refer this Wiki Link -- https://en.wikipedia.org/wiki/Transpose
t(m2)
# As seen below - the DIAGONAL Elements remain as-is.
# 10, 15 , 20 , 25 -- do not move .
# Non Diagonal elements are Transposed ,giving the Transpose Matrix.
# Code Section -10
m1 <- matrix(data=66:69,nrow=2,ncol=2)
m1
# Lets now TRANSPOSE this MATRIX - for more on TRANSPOSE of MATRICES
# kindly refer this Wiki Link -- https://en.wikipedia.org/wiki/Transpose
t(m1)
# As seen below - the DIAGONAL Elements remain as -is .
# 66 and 69 do not move .
# 67 and 68 switch places , thus giving us a Transpose Matrix.
# Lets look at another example of TRANSPOSE ....
m2 <- matrix(data=10:25,nrow=4,ncol=4)
m2
class(m2)
## Note  in the above sequence - 10:25 - both 10 and 25 are included.
# Lets now TRANSPOSE this MATRIX - for more on TRANSPOSE of MATRICES
# kindly refer this Wiki Link -- https://en.wikipedia.org/wiki/Transpose
t(m2)
# As seen below - the DIAGONAL Elements remain as-is.
# 10, 15 , 20 , 25 -- do not move .
# Non Diagonal elements are Transposed ,giving the Transpose Matrix.
m3 <- rbind(m1,m2)
# As seen below we need to have SAME COLUMN Numbers to do a RBIND
m3 <- rbind(m1,m2)
# As seen below we need to have SAME COLUMN Numbers to do a RBIND
#m3 <- rbind(m1,m2)
#
m3 <- cbind(m1,m2)
ma1 <- c(11,12,13,14,15)
ma1
# As seen below we need to have same COLUMN Numbers to do a RBIND
#m3 <- rbind(m1,m2)
# # As seen below we need to have same ROW Numbers to do a RBIND
m3 <- cbind(m1,m2)
ma1 <- c(11,12,13,14,15)
ma1
class(ma1)
# As seen below we need to have same COLUMN Numbers to do a RBIND
#m3 <- rbind(m1,m2)
# # As seen below we need to have same ROW Numbers to do a RBIND
m3 <- cbind(m1,m2)
ma1 <- matrix(data=10:16,nrow=3,ncol=2)
ma1
class(ma1)
# As seen below we need to have same COLUMN Numbers to do a RBIND
#m3 <- rbind(m1,m2)
# # As seen below we need to have same ROW Numbers to do a RBIND
m3 <- cbind(m1,m2)
ma1 <- matrix(data=10:15,nrow=3,ncol=2)
ma1
class(ma1)
# As seen below we need to have same COLUMN Numbers to do a RBIND
#m3 <- rbind(m1,m2)
# # As seen below we need to have same ROW Numbers to do a RBIND
m3 <- cbind(m1,m2)
ma1 <- matrix(data=10:15,nrow=3,ncol=2)
ma1
#
class(ma1)
#
ma2 <- matrix(data=20:25,nrow=3,ncol=2)
ma2
#
class(ma2)
# As seen below we need to have same COLUMN Numbers to do a RBIND
#m3 <- rbind(m1,m2)
# # As seen below we need to have same ROW Numbers to do a RBIND
m3 <- cbind(m1,m2)
ma1 <- matrix(data=10:15,nrow=3,ncol=2)
ma1
#
class(ma1)
#
ma2 <- matrix(data=20:25,nrow=3,ncol=2)
ma2
#
class(ma2)
#
ma3 <- rbind(ma1,ma2)
ma3
#
# As seen below we need to have same COLUMN Numbers to do a RBIND
#m3 <- rbind(m1,m2)
# # As seen below we need to have same ROW Numbers to do a RBIND
m3 <- cbind(m1,m2)
ma1 <- matrix(data=10:15,nrow=3,ncol=2)
ma1
#
class(ma1)
#
ma2 <- matrix(data=20:25,nrow=3,ncol=2)
ma2
#
class(ma2)
# ROW Bind the Matrices
ma3 <- rbind(ma1,ma2)
ma3
#
# COLUMN Bind the Matrices
ma4 <- cbind(ma1,ma2)
ma4
# As seen below we need to have same COLUMN Numbers to do a RBIND
#m3 <- rbind(m1,m2)
# # As seen below we need to have same ROW Numbers to do a RBIND
m3 <- cbind(m1,m2)
df_1 <- read.csv("~/Desktop/R_Own/R_1 - Sheet1.csv",header =TRUE , sep = "," )
df_1
df_1 <- read.csv("~/Desktop/R_Own/R_1 - Sheet1.csv",header =TRUE , sep = "," )
df_1
#
df_2 <- read.csv("~/Desktop/R_Own/R_2.csv",header =TRUE , sep = "," )
df_2
#
df_2 <- read.csv("~/Desktop/R_Own/R_2.csv",header =TRUE , sep = "," )
df_2
df_1 <- read.csv("~/Desktop/R_Own/R_1 - Sheet1.csv",header =TRUE , sep = "," )
df_1
df_1 <- read.csv("~/Desktop/R_Own/R_1 - Sheet1.csv",header =TRUE , sep = "," )
df_1
#
df_2 <- read.csv("~/Desktop/R_Own/R_2.csv",header =TRUE , sep = "," )
df_2
df_3_C <- cbind(df_1,df_2)
df_3_C
df_3_R <- rbind(df_2,df_1)
df_3_R
df_3_C <- cbind(df_1,df_2)
df_3_C
objects()
library(psych)
install.packages("psych")
library("psych", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.3")
library("psych", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.3")
library(psych)
library("psych", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.3")
library(psych)
?describeBy()
library("psych", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.3")
library(psych)
#?describeBy()
describeBy(df_3_C)
library("psych", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.3")
library(psych)
#?describeBy()
describeBy(df_3_C,df_3_C$Date.of.Invoice)
